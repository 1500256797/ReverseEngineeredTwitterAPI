/// Generated by https://quicktype.io
extern crate serde_json;
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Search {
    #[serde(rename = "data")]
    pub data: Data,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Data {
    #[serde(rename = "search_by_raw_query")]
    pub search_by_raw_query: SearchByRawQuery,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SearchByRawQuery {
    #[serde(rename = "search_timeline")]
    pub search_timeline: SearchTimeline,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SearchTimeline {
    #[serde(rename = "timeline")]
    pub timeline: Timeline,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Timeline {
    #[serde(rename = "instructions")]
    pub instructions: Option<Vec<Instruction>>,

    #[serde(rename = "responseObjects")]
    pub response_objects: ResponseObjects,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Instruction {
    #[serde(rename = "type")]
    pub instruction_type: String,

    #[serde(rename = "entries")]
    pub entries: Option<Vec<Entry>>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Entry {
    #[serde(rename = "entryId")]
    pub entry_id: String,

    #[serde(rename = "sortIndex")]
    pub sort_index: String,

    #[serde(rename = "content")]
    pub content: Content,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Content {
    #[serde(rename = "entryType")]
    pub entry_type: Option<String>,

    #[serde(rename = "__typename")]
    pub typename: Option<String>,

    #[serde(rename = "items")]
    pub items: Option<Vec<ItemElement>>,

    #[serde(rename = "displayType")]
    pub display_type: Option<String>,

    #[serde(rename = "header")]
    pub header: Option<Header>,

    #[serde(rename = "footer")]
    pub footer: Option<Footer>,

    #[serde(rename = "clientEventInfo")]
    pub client_event_info: Option<ContentClientEventInfo>,

    #[serde(rename = "itemContent")]
    pub item_content: Option<ContentItemContent>,

    #[serde(rename = "feedbackInfo")]
    pub feedback_info: Option<FeedbackInfo>,

    #[serde(rename = "value")]
    pub value: Option<String>,

    #[serde(rename = "cursorType")]
    pub cursor_type: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ContentClientEventInfo {
    #[serde(rename = "component")]
    component: String,

    #[serde(rename = "element")]
    element: String,

    #[serde(rename = "details")]
    details: Option<Details>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Details {
    #[serde(rename = "timelinesDetails")]
    timelines_details: TimelinesDetails,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TimelinesDetails {
    #[serde(rename = "controllerData")]
    controller_data: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FeedbackInfo {
    #[serde(rename = "feedbackKeys")]
    feedback_keys: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Footer {
    #[serde(rename = "displayType")]
    display_type: String,

    #[serde(rename = "text")]
    text: String,

    #[serde(rename = "landingUrl")]
    landing_url: LandingUrl,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LandingUrl {
    #[serde(rename = "url")]
    url: String,

    #[serde(rename = "urlType")]
    url_type: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Header {
    #[serde(rename = "displayType")]
    display_type: String,

    #[serde(rename = "text")]
    text: String,

    #[serde(rename = "sticky")]
    sticky: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ContentItemContent {
    #[serde(rename = "itemType")]
    pub item_type: String,

    #[serde(rename = "__typename")]
    pub typename: String,

    #[serde(rename = "tweet_results")]
    pub tweet_results: TweetResults,

    #[serde(rename = "tweetDisplayType")]
    pub tweet_display_type: String,

    #[serde(rename = "highlights")]
    pub highlights: Option<Highlights>,

    #[serde(rename = "promotedMetadata")]
    pub promoted_metadata: Option<PromotedMetadata>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Highlights {
    #[serde(rename = "textHighlights")]
    text_highlights: Vec<TextHighlight>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TextHighlight {
    #[serde(rename = "startIndex")]
    start_index: i64,

    #[serde(rename = "endIndex")]
    end_index: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PromotedMetadata {
    #[serde(rename = "advertiser_results")]
    pub advertiser_results: SerResults,

    #[serde(rename = "adMetadataContainer")]
    ad_metadata_container: AdMetadataContainer,

    #[serde(rename = "disclosureType")]
    disclosure_type: String,

    #[serde(rename = "experimentValues")]
    experiment_values: Vec<ExperimentValue>,

    #[serde(rename = "impressionId")]
    impression_id: String,

    #[serde(rename = "impressionString")]
    impression_string: String,

    #[serde(rename = "clickTrackingInfo")]
    click_tracking_info: ClickTrackingInfo,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AdMetadataContainer {
    #[serde(rename = "renderLegacyWebsiteCard")]
    render_legacy_website_card: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SerResults {
    #[serde(rename = "result")]
    pub result: AdvertiserResultsResult,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AdvertiserResultsResult {
    #[serde(rename = "__typename")]
    typename: String,

    #[serde(rename = "id")]
    id: String,

    #[serde(rename = "rest_id")]
    rest_id: String,

    #[serde(rename = "affiliates_highlighted_label")]
    affiliates_highlighted_label: UnmentionData,

    #[serde(rename = "has_graduated_access")]
    has_graduated_access: bool,

    #[serde(rename = "is_blue_verified")]
    pub is_blue_verified: bool,

    #[serde(rename = "profile_image_shape")]
    profile_image_shape: Option<String>,

    #[serde(rename = "legacy")]
    legacy: PurpleLegacy,

    #[serde(rename = "professional")]
    professional: Option<Professional>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UnmentionData {}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PurpleLegacy {
    #[serde(rename = "can_dm")]
    can_dm: bool,

    #[serde(rename = "can_media_tag")]
    can_media_tag: bool,

    #[serde(rename = "created_at")]
    created_at: String,

    #[serde(rename = "default_profile")]
    default_profile: bool,

    #[serde(rename = "default_profile_image")]
    default_profile_image: bool,

    #[serde(rename = "description")]
    description: String,

    #[serde(rename = "entities")]
    entities: Entities,

    #[serde(rename = "fast_followers_count")]
    fast_followers_count: i64,

    #[serde(rename = "favourites_count")]
    favourites_count: i64,

    #[serde(rename = "followers_count")]
    followers_count: i64,

    #[serde(rename = "friends_count")]
    friends_count: i64,

    #[serde(rename = "has_custom_timelines")]
    has_custom_timelines: bool,

    #[serde(rename = "is_translator")]
    is_translator: bool,

    #[serde(rename = "listed_count")]
    listed_count: i64,

    #[serde(rename = "location")]
    location: String,

    #[serde(rename = "media_count")]
    media_count: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "normal_followers_count")]
    normal_followers_count: i64,

    #[serde(rename = "pinned_tweet_ids_str")]
    pinned_tweet_ids_str: Vec<String>,

    #[serde(rename = "possibly_sensitive")]
    possibly_sensitive: bool,

    #[serde(rename = "profile_banner_url")]
    profile_banner_url: Option<String>,

    #[serde(rename = "profile_image_url_https")]
    profile_image_url_https: String,

    #[serde(rename = "profile_interstitial_type")]
    profile_interstitial_type: String,

    #[serde(rename = "screen_name")]
    screen_name: String,

    #[serde(rename = "statuses_count")]
    statuses_count: i64,

    #[serde(rename = "translator_type")]
    translator_type: String,

    #[serde(rename = "url")]
    url: Option<String>,

    #[serde(rename = "verified")]
    verified: bool,

    #[serde(rename = "want_retweets")]
    want_retweets: bool,

    #[serde(rename = "withheld_in_countries")]
    withheld_in_countries: Vec<Option<serde_json::Value>>,

    #[serde(rename = "verified_type")]
    verified_type: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Entities {
    #[serde(rename = "description")]
    description: Description,

    #[serde(rename = "url")]
    url: Option<Description>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Description {
    #[serde(rename = "urls")]
    urls: Vec<Url>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Url {
    #[serde(rename = "display_url")]
    display_url: String,

    #[serde(rename = "expanded_url")]
    expanded_url: String,

    #[serde(rename = "url")]
    url: String,

    #[serde(rename = "indices")]
    indices: Vec<i64>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Professional {
    #[serde(rename = "rest_id")]
    rest_id: String,

    #[serde(rename = "professional_type")]
    professional_type: String,

    #[serde(rename = "category")]
    category: Vec<Category>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Category {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "icon_name")]
    icon_name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ClickTrackingInfo {
    #[serde(rename = "urlParams")]
    url_params: Vec<ExperimentValue>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ExperimentValue {
    #[serde(rename = "key")]
    key: String,

    #[serde(rename = "value")]
    value: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TweetResults {
    #[serde(rename = "result")]
    pub result: TweetResultsResult,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TweetResultsResult {
    #[serde(rename = "__typename")]
    typename: Option<String>,

    #[serde(rename = "rest_id")]
    rest_id: String,

    #[serde(rename = "core")]
    core: Core,

    #[serde(rename = "unmention_data")]
    unmention_data: UnmentionData,

    #[serde(rename = "unified_card")]
    unified_card: Option<UnifiedCard>,

    #[serde(rename = "edit_control")]
    edit_control: PurpleEditControl,

    #[serde(rename = "is_translatable")]
    is_translatable: bool,

    #[serde(rename = "views")]
    pub views: Views,

    #[serde(rename = "source")]
    source: String,

    #[serde(rename = "legacy")]
    pub legacy: FluffyLegacy,

    #[serde(rename = "note_tweet")]
    note_tweet: Option<NoteTweet>,

    #[serde(rename = "card")]
    card: Option<Card>,

    #[serde(rename = "previous_counts")]
    previous_counts: Option<PreviousCounts>,

    #[serde(rename = "quoted_status_result")]
    quoted_status_result: Option<QuotedStatusResult>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Card {
    #[serde(rename = "rest_id")]
    rest_id: String,

    #[serde(rename = "legacy")]
    legacy: CardLegacy,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CardLegacy {
    #[serde(rename = "binding_values")]
    binding_values: Vec<BindingValue>,

    #[serde(rename = "card_platform")]
    card_platform: CardPlatform,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "url")]
    url: String,

    #[serde(rename = "user_refs_results")]
    user_refs_results: Vec<Option<serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BindingValue {
    #[serde(rename = "key")]
    key: String,

    #[serde(rename = "value")]
    value: BindingValueValue,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BindingValueValue {
    #[serde(rename = "string_value")]
    string_value: Option<String>,

    #[serde(rename = "type")]
    value_type: String,

    #[serde(rename = "scribe_key")]
    scribe_key: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CardPlatform {
    #[serde(rename = "platform")]
    platform: Platform,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Platform {
    #[serde(rename = "audience")]
    audience: Audience,

    #[serde(rename = "device")]
    device: Device,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Audience {
    #[serde(rename = "name")]
    name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Device {
    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "version")]
    version: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Core {
    #[serde(rename = "user_results")]
    user_results: SerResults,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PurpleEditControl {
    #[serde(rename = "edit_tweet_ids")]
    edit_tweet_ids: Option<Vec<String>>,

    #[serde(rename = "editable_until_msecs")]
    editable_until_msecs: Option<String>,

    #[serde(rename = "is_edit_eligible")]
    is_edit_eligible: Option<bool>,

    #[serde(rename = "edits_remaining")]
    edits_remaining: Option<String>,

    #[serde(rename = "initial_tweet_id")]
    initial_tweet_id: Option<String>,

    #[serde(rename = "edit_control_initial")]
    edit_control_initial: Option<EditControlInitialClass>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct EditControlInitialClass {
    #[serde(rename = "edit_tweet_ids")]
    edit_tweet_ids: Vec<String>,

    #[serde(rename = "editable_until_msecs")]
    editable_until_msecs: String,

    #[serde(rename = "is_edit_eligible")]
    is_edit_eligible: bool,

    #[serde(rename = "edits_remaining")]
    edits_remaining: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FluffyLegacy {
    #[serde(rename = "bookmark_count")]
    pub bookmark_count: i64,

    #[serde(rename = "bookmarked")]
    pub bookmarked: bool,

    #[serde(rename = "created_at")]
    pub created_at: String,

    #[serde(rename = "conversation_id_str")]
    pub conversation_id_str: String,

    #[serde(rename = "display_text_range")]
    pub display_text_range: Vec<i64>,

    #[serde(rename = "entities")]
    pub entities: Entit,

    #[serde(rename = "extended_entities")]
    pub extended_entities: Option<PurpleExtendedEntities>,

    #[serde(rename = "favorite_count")]
    pub favorite_count: i64,

    #[serde(rename = "favorited")]
    pub favorited: bool,

    #[serde(rename = "full_text")]
    pub full_text: String,

    #[serde(rename = "is_quote_status")]
    pub is_quote_status: bool,

    #[serde(rename = "lang")]
    pub lang: Option<String>,

    #[serde(rename = "possibly_sensitive")]
    pub possibly_sensitive: Option<bool>,

    #[serde(rename = "possibly_sensitive_editable")]
    pub possibly_sensitive_editable: Option<bool>,

    #[serde(rename = "quote_count")]
    pub quote_count: i64,

    #[serde(rename = "reply_count")]
    pub reply_count: i64,

    #[serde(rename = "retweet_count")]
    pub retweet_count: i64,

    #[serde(rename = "retweeted")]
    pub retweeted: bool,

    #[serde(rename = "user_id_str")]
    pub user_id_str: String,

    #[serde(rename = "id_str")]
    pub id_str: String,

    #[serde(rename = "scopes")]
    pub scopes: Option<Scopes>,

    #[serde(rename = "quoted_status_id_str")]
    pub quoted_status_id_str: Option<String>,

    #[serde(rename = "quoted_status_permalink")]
    pub quoted_status_permalink: Option<QuotedStatusPermalink>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Entit {
    #[serde(rename = "media")]
    media: Option<Vec<EntitiesMedia>>,

    #[serde(rename = "user_mentions")]
    user_mentions: Vec<UserMention>,

    #[serde(rename = "urls")]
    urls: Vec<Url>,

    #[serde(rename = "hashtags")]
    hashtags: Vec<Hashtag>,

    #[serde(rename = "symbols")]
    symbols: Vec<Hashtag>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Hashtag {
    #[serde(rename = "indices")]
    indices: Vec<i64>,

    #[serde(rename = "text")]
    text: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct EntitiesMedia {
    #[serde(rename = "display_url")]
    display_url: String,

    #[serde(rename = "expanded_url")]
    expanded_url: String,

    #[serde(rename = "id_str")]
    id_str: String,

    #[serde(rename = "indices")]
    indices: Vec<i64>,

    #[serde(rename = "media_key")]
    media_key: String,

    #[serde(rename = "media_url_https")]
    media_url_https: String,

    #[serde(rename = "type")]
    media_type: Option<String>,

    #[serde(rename = "url")]
    url: String,

    #[serde(rename = "ext_media_availability")]
    ext_media_availability: ExtMediaAvailability,

    #[serde(rename = "features")]
    features: Option<Features>,

    #[serde(rename = "sizes")]
    sizes: Sizes,

    #[serde(rename = "original_info")]
    original_info: OriginalInfo,

    #[serde(rename = "additional_media_info")]
    additional_media_info: Option<AdditionalMediaInfo>,

    #[serde(rename = "video_info")]
    video_info: Option<VideoInfo>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AdditionalMediaInfo {
    #[serde(rename = "monetizable")]
    monetizable: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ExtMediaAvailability {
    #[serde(rename = "status")]
    status: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Features {
    #[serde(rename = "large")]
    large: OrigClass,

    #[serde(rename = "medium")]
    medium: OrigClass,

    #[serde(rename = "small")]
    small: OrigClass,

    #[serde(rename = "orig")]
    orig: OrigClass,

    #[serde(rename = "all")]
    all: Option<All>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct All {
    #[serde(rename = "tags")]
    tags: Vec<Tag>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Tag {
    #[serde(rename = "user_id")]
    user_id: String,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "screen_name")]
    screen_name: String,

    #[serde(rename = "type")]
    tag_type: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrigClass {
    #[serde(rename = "faces")]
    faces: Vec<FocusRect>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FocusRect {
    #[serde(rename = "x")]
    x: i64,

    #[serde(rename = "y")]
    y: i64,

    #[serde(rename = "h")]
    h: i64,

    #[serde(rename = "w")]
    w: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OriginalInfo {
    #[serde(rename = "height")]
    height: i64,

    #[serde(rename = "width")]
    width: i64,

    #[serde(rename = "focus_rects")]
    focus_rects: Vec<FocusRect>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Sizes {
    #[serde(rename = "large")]
    large: ThumbClass,

    #[serde(rename = "medium")]
    medium: ThumbClass,

    #[serde(rename = "small")]
    small: ThumbClass,

    #[serde(rename = "thumb")]
    thumb: ThumbClass,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ThumbClass {
    #[serde(rename = "h")]
    h: i64,

    #[serde(rename = "w")]
    w: i64,

    #[serde(rename = "resize")]
    resize: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VideoInfo {
    #[serde(rename = "aspect_ratio")]
    aspect_ratio: Vec<i64>,

    #[serde(rename = "duration_millis")]
    duration_millis: Option<i64>,

    #[serde(rename = "variants")]
    variants: Vec<Variant>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Variant {
    #[serde(rename = "bitrate")]
    bitrate: Option<i64>,

    #[serde(rename = "content_type")]
    content_type: Option<String>,

    #[serde(rename = "url")]
    url: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UserMention {
    #[serde(rename = "id_str")]
    id_str: String,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "screen_name")]
    screen_name: String,

    #[serde(rename = "indices")]
    indices: Vec<i64>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PurpleExtendedEntities {
    #[serde(rename = "media")]
    media: Vec<EntitiesMedia>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct QuotedStatusPermalink {
    #[serde(rename = "url")]
    url: String,

    #[serde(rename = "expanded")]
    expanded: String,

    #[serde(rename = "display")]
    display: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Scopes {
    #[serde(rename = "followers")]
    followers: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct NoteTweet {
    #[serde(rename = "is_expandable")]
    is_expandable: bool,

    #[serde(rename = "note_tweet_results")]
    note_tweet_results: NoteTweetResults,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct NoteTweetResults {
    #[serde(rename = "result")]
    result: NoteTweetResultsResult,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct NoteTweetResultsResult {
    #[serde(rename = "id")]
    id: String,

    #[serde(rename = "text")]
    text: String,

    #[serde(rename = "entity_set")]
    entity_set: Entit,

    #[serde(rename = "richtext")]
    richtext: Richtext,

    #[serde(rename = "media")]
    media: ResultMedia,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ResultMedia {
    #[serde(rename = "inline_media")]
    inline_media: Vec<Option<serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Richtext {
    #[serde(rename = "richtext_tags")]
    richtext_tags: Vec<RichtextTag>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RichtextTag {
    #[serde(rename = "from_index")]
    from_index: i64,

    #[serde(rename = "to_index")]
    to_index: i64,

    #[serde(rename = "richtext_types")]
    richtext_types: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PreviousCounts {
    #[serde(rename = "bookmark_count")]
    bookmark_count: i64,

    #[serde(rename = "favorite_count")]
    favorite_count: i64,

    #[serde(rename = "quote_count")]
    quote_count: i64,

    #[serde(rename = "reply_count")]
    reply_count: i64,

    #[serde(rename = "retweet_count")]
    retweet_count: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct QuotedStatusResult {
    #[serde(rename = "result")]
    result: QuotedStatusResultResult,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct QuotedStatusResultResult {
    #[serde(rename = "__typename")]
    typename: Option<String>,

    #[serde(rename = "rest_id")]
    rest_id: String,

    #[serde(rename = "core")]
    core: Core,

    #[serde(rename = "unmention_data")]
    unmention_data: UnmentionData,

    #[serde(rename = "unified_card")]
    unified_card: UnifiedCard,

    #[serde(rename = "edit_control")]
    edit_control: EditControlInitialClass,

    #[serde(rename = "is_translatable")]
    is_translatable: bool,

    #[serde(rename = "views")]
    views: Views,

    #[serde(rename = "source")]
    source: String,

    #[serde(rename = "legacy")]
    legacy: TentacledLegacy,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TentacledLegacy {
    #[serde(rename = "bookmark_count")]
    bookmark_count: i64,

    #[serde(rename = "bookmarked")]
    bookmarked: bool,

    #[serde(rename = "created_at")]
    created_at: String,

    #[serde(rename = "conversation_id_str")]
    conversation_id_str: String,

    #[serde(rename = "display_text_range")]
    display_text_range: Vec<i64>,

    #[serde(rename = "entities")]
    entities: Entit,

    #[serde(rename = "extended_entities")]
    extended_entities: FluffyExtendedEntities,

    #[serde(rename = "favorite_count")]
    favorite_count: i64,

    #[serde(rename = "favorited")]
    favorited: bool,

    #[serde(rename = "full_text")]
    full_text: String,

    #[serde(rename = "is_quote_status")]
    is_quote_status: bool,

    #[serde(rename = "lang")]
    lang: Option<String>,

    #[serde(rename = "possibly_sensitive")]
    possibly_sensitive: bool,

    #[serde(rename = "possibly_sensitive_editable")]
    possibly_sensitive_editable: bool,

    #[serde(rename = "quote_count")]
    quote_count: i64,

    #[serde(rename = "reply_count")]
    reply_count: i64,

    #[serde(rename = "retweet_count")]
    retweet_count: i64,

    #[serde(rename = "retweeted")]
    retweeted: bool,

    #[serde(rename = "user_id_str")]
    user_id_str: String,

    #[serde(rename = "id_str")]
    id_str: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FluffyExtendedEntities {
    #[serde(rename = "media")]
    media: Vec<PurpleMedia>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PurpleMedia {
    #[serde(rename = "display_url")]
    display_url: String,

    #[serde(rename = "expanded_url")]
    expanded_url: String,

    #[serde(rename = "id_str")]
    id_str: String,

    #[serde(rename = "indices")]
    indices: Vec<i64>,

    #[serde(rename = "media_key")]
    media_key: String,

    #[serde(rename = "media_url_https")]
    media_url_https: String,

    #[serde(rename = "type")]
    media_type: String,

    #[serde(rename = "url")]
    url: String,

    #[serde(rename = "ext_media_availability")]
    ext_media_availability: ExtMediaAvailability,

    #[serde(rename = "features")]
    features: Features,

    #[serde(rename = "sizes")]
    sizes: Sizes,

    #[serde(rename = "original_info")]
    original_info: OriginalInfo,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UnifiedCard {
    #[serde(rename = "card_fetch_state")]
    card_fetch_state: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Views {
    #[serde(rename = "count")]
    pub count: Option<String>,

    #[serde(rename = "state")]
    state: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ItemElement {
    #[serde(rename = "entryId")]
    pub entry_id: String,

    #[serde(rename = "item")]
    pub item: ItemItem,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ItemItem {
    #[serde(rename = "itemContent")]
    pub item_content: ItemItemContent,

    #[serde(rename = "clientEventInfo")]
    client_event_info: ContentClientEventInfo,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ItemItemContent {
    #[serde(rename = "itemType")]
    item_type: String,

    #[serde(rename = "__typename")]
    typename: String,

    #[serde(rename = "user_results")]
    pub user_results: SerResults,

    #[serde(rename = "userDisplayType")]
    user_display_type: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ResponseObjects {
    #[serde(rename = "feedbackActions")]
    feedback_actions: Vec<FeedbackAction>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FeedbackAction {
    #[serde(rename = "key")]
    key: String,

    #[serde(rename = "value")]
    value: FeedbackActionValue,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FeedbackActionValue {
    #[serde(rename = "feedbackType")]
    feedback_type: String,

    #[serde(rename = "prompt")]
    prompt: String,

    #[serde(rename = "confirmation")]
    confirmation: String,

    #[serde(rename = "childKeys")]
    child_keys: Option<Vec<String>>,

    #[serde(rename = "hasUndoAction")]
    has_undo_action: bool,

    #[serde(rename = "confirmationDisplayType")]
    confirmation_display_type: String,

    #[serde(rename = "icon")]
    icon: Option<String>,

    #[serde(rename = "clientEventInfo")]
    client_event_info: ValueClientEventInfo,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ValueClientEventInfo {
    #[serde(rename = "action")]
    action: String,

    #[serde(rename = "component")]
    component: String,

    #[serde(rename = "element")]
    element: String,
}
